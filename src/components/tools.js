import gql from 'graphql-tag';
import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';
import { ref } from 'vue';
//import { AIMessage } from "@langchain/core/messages";
//import * as d3 from 'd3';
import store from '../store/store';

var stop_iterations = 5;


import { query_doc, return_format } from './query_doc.js';
import Anthropic from '@anthropic-ai/sdk';
import {getMessages} from './ChatInput.vue';
//const { API_HOST } = require('./../../config.js')
//import mySettingsObject from 'my-app-settings'

let API_HOST = window.myAppSettings.API_HOST

//Schemas for tools
export const getCoordinatesSchema = {
    name: "getCoordinates",
    description: "Get coordinates of a location",
    input_schema: {
        type: "object",
        properties: {
            departure_location: {
                type: "string",
                description: "if no departure location is given, the current location is used",
            },
            destination_location: {
                type: "string",
                description: "Destination location must be given",
            },
        },
        required: ["departure_location", "destination_location"],
    }
}

/*export const verifyCoordinatesSchema = {
    name: "verifyCoordinates",
    description: "Verify coordinates of a location",
    input_schema: {
        type: "object",
        properties: {
            coordinates: {
                type: "array",
                description: "Coordinates of the location",
                items: {
                    type: "number",
                },
            },
            location: {
                type: "string",
                description: "Location name",
            },
        },
        required: ["coordinates", "location"],
    }
}*/

export const createGraphQLQuerySchema = {
    name: "createGraphQLQuery",
    description: "Create a GraphQL query",
    input_schema: {
        type: "object",
        properties: {
        },
        required: [],
    }
}

export const executeGraphQLQuerySchema = {
    name: "executeGraphQLQuery",
    description: "Find a route using GraphQL query. Coordinates instead of names need be used for locations.",
    input_schema: {
        type: "object",
        properties: {
            query: {
                type: "string",
                description: "GraphQL query",
            },
        },
        required: ["query"],
    }
}

export const changeInformationSchema = {
    name: "changeInformation",
    description: "Change information including all parameters of the query originated in the users query.",
    input_schema: {
        type: "object",
        properties: {
            filters: {
                type: "array",
                items: {type:"string"},
                description: "filters applied in the query, can also be empty. The array objects should be a descriptions of the applied filters in human readable condition.",
            },
            preferences: {
                type: "array",
                items: {type:"string"},
                description: "preferences selected in the query, can also be empty. The array objects should be string descriptions of the applied preferences.",
            },
            datetime: {
                type: "string",
                description: "datetime of the query",
            },
        },
        required: ["filters", "preferences", "datetime"],
    }
}


//Handlers for tools
const getCoordinatesHandler = async(input) => {
    console.log(input)
    //Following part generated by ChatGPT, asynchronous code is a bitch
    var coords = []
    //var names = [null,null]
    //var locations = [input.departure_location, input.destination_location]
    var locations1 = ["departure_location", "destination_location"]
    console.log(eval("input."+locations1[0]) + "--------------")
    //var count = 0
    for (var x of locations1){
        var loc = eval("input." + x)
        try {
            const response = await fetch('https://nominatim.openstreetmap.org/search?q=' + loc + '&format=json&limit=1');
            const data = await response.json();
            console.log(data)
            if (data && data.length > 0) {
                const place = data[0];
                const lat_from = place.lat;
                const lon_from = place.lon;
                console.log(place.name)
                store.commit("change_" + x, ["",place.display_name,[lat_from,lon_from]])
                coords.push([{"location_name":place.display_name},lat_from,lon_from])
                //names[count]= place.name
            } else {
                console.log(x);
                console.log(data);
                //store.commit("change_loading", false);
                coords.push(["The place " + x + " could not be found"]);
            }
        } catch (error) {
            console.error('Error fetching coordinates:', error);
            //store.commit("change_loading", false);
            coords.push(["Error fetching coordinates for: " + x])
        }
        //count += 1
    }
    //store.commit("change_departure_location", ["",names[0],coords[0]])
    //store.commit("change_destination_location", ["",names[1],coords[1]])
    console.log(coords)
    return coords;
}

//

/*const verifyCoordinatesHandler = (input) => {
    if (input.coordinates[0] === 48.2 && input.coordinates[1] === 16.3) {
        return "Coordinates verified";
    } else {
        return "Coordinates not verified";
    }
}*/

const createGraphQLQueryHandler = async() => {
    var messages = getMessages()
    var spliced_messages = messages.splice(0,(messages.length-1))
    {
        const anthropic = new Anthropic({apiKey: ""})

        const createAPIMessage = async (messages) => {
            console.log(messages)
            const response = await anthropic.messages.create({
                temperature: 0.0,
                model: "claude-3-haiku-20240307",
                max_tokens: 1024,
                messages,
                system: ` Create a graphql query based on the history given to you.
                The documentation of the GraphQL API is the following: ` + JSON.stringify(query_doc) + "Here is the return format I need to get: " + JSON.stringify(return_format),
                tools: [getCoordinatesSchema, executeGraphQLQuerySchema, changeInformationSchema],
            })
            console.log(response)
            return response
        }

        var query = await createAPIMessage(spliced_messages);

        return query;
      }
}

const executeGraphQLQueryHandler = async(input) => { //performing graphql query and returning error if query could not be executed
    input = input.query
    console.log(input)
    //Stopping before an infinite loop starts
    stop_iterations -= 1;

    console.log(`${API_HOST}:8080/otp/routers/default/index/graphql`)

    const apolloClient = new ApolloClient({
        link: createHttpLink({
            uri: `http://${API_HOST}:8080/otp/routers/default/index/graphql`,
        }),
        cache: new InMemoryCache(),
    });

    const graphqlResult = ref(null);

    try {
        var gqlinput = gql(input)
        // Execute the GraphQL query using the ApolloClient instance
        const { data } = await apolloClient.query({
            query: gqlinput,
        });
        graphqlResult.value = data;
        //chatHistory.push(new AIMessage(input))
        store.commit("change_itineraries", graphqlResult.value)
        stop_iterations = 5
        if(graphqlResult.value["plan"]["itineraries"].length > 0){
            return "Query executed successfully. Itineraries are displayed for the user but are too much data to return to you.";
        } else{
            return "Query executed successfully. No itineraries found for the given input.";
        }
    } catch (error) {
        console.log("return error")
        console.log(error)
        if (stop_iterations <= 0) {
            //store.commit("change_loading", false)
            //d3.select(this.$refs.ChatAnswer).text("Could not formulate a query from your input. Please try to rephrase your input.")
            stop_iterations = 5
            return ("Too many tries to improve the query, the process has been aborted. Please try to rephrase your input.")
            //return ("Too many iterations, could not formulate a query from your input. Please try to rephrase your input.")
        } else {
            return ('Error executing GraphQL query. Please improve the query to avoid the following error:', JSON.stringify(error));
        }
    }
}

const changeInformationHandler = async(input) => {
    store.commit("change_filters", input.filters)
    store.commit("change_preferences", input.preferences)
    store.commit("change_datetime", input.datetime)
    return "Information display changed according to input of tool"
}

//Tool Handler
export const toolHandler = async (tool, input) => {
    console.log(tool, input)
    switch (tool) {
        case "getCoordinates":
            return getCoordinatesHandler(input);
        /*case "verifyCoordinates":
            return verifyCoordinatesHandler(input);*/
        case "createGraphQLQuery":
            return (await createGraphQLQueryHandler(input));
        case "executeGraphQLQuery":
            return (await executeGraphQLQueryHandler(input));
        case "changeInformation":
            return changeInformationHandler(input);
        default:
            return "Tool not found";
    }
}